"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
var baseRequest_1 = require("../../soap/request/baseRequest");
var Constants = require("../../constants");
var UserService = /** @class */ (function () {
    function UserService(httpClient) {
        this.httpClient = httpClient;
        this.options = {
            responseType: "text"
        };
    }
    UserService.prototype.login = function (user) {
        var url = Constants.SERVER_URL + "Login/";
        var body = this.buildLoginBody(user);
        return this.httpClient.post(url, body, this.options);
    };
    UserService.prototype.userDetail = function (token) {
        var url = Constants.BASE_SERVICE_URL + "UserManagement.asmx";
        var requestBody = "<UserDetail xmlns=\"https://is.skaut.cz/\">\n                <userDetailInput>\n                    <ID_Login>" + token + "</ID_Login>\n                    <ID_Application>" + Constants.APPLICATION_ID + "</ID_Application>\n                </userDetailInput>\n            </UserDetail>";
        var body = baseRequest_1.baseRequest(requestBody);
        var options = {
            headers: new http_1.HttpHeaders({
                "Content-Type": " text/xml",
                "SOAPAction": "https://is.skaut.cz/UserDetail"
            }),
            responseType: "text"
        };
        return this.httpClient.post(url, body, options);
    };
    UserService.prototype.buildLoginBody = function (user) {
        var body = new FormData();
        body.append("appid", Constants.APPLICATION_ID);
        body.append("ctl00$Content$txtUserName", user.name);
        body.append("ctl00$Content$txtPassword", user.password);
        body.append("ctl00$Content$BtnLogin", Constants.BUTTON_LOGIN);
        body.append("__EVENTVALIDATION", Constants.__EVENTVALIDATION);
        body.append("__VIEWSTATE", Constants.__VIEWSTATE);
        body.append("__VIEWSTATEGENERATOR", Constants.__VIEWSTATEGENERATOR);
        return body;
    };
    UserService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient])
    ], UserService);
    return UserService;
}());
exports.UserService = UserService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXNlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBQzNDLDZDQUErRDtBQUUvRCw4REFBNkQ7QUFFN0QsMkNBQTRDO0FBSzVDO0lBS0kscUJBQXFCLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFKM0MsWUFBTyxHQUFHO1lBQ04sWUFBWSxFQUFFLE1BQWdCO1NBQ2pDLENBQUM7SUFFNkMsQ0FBQztJQUVoRCwyQkFBSyxHQUFMLFVBQU8sSUFBVTtRQUNiLElBQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO1FBQzVDLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUN2QixHQUFHLEVBQ0gsSUFBSSxFQUNKLElBQUksQ0FBQyxPQUFPLENBQ2YsQ0FBQztJQUNOLENBQUM7SUFFRCxnQ0FBVSxHQUFWLFVBQVksS0FBYTtRQUNyQixJQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsZ0JBQWdCLEdBQUcscUJBQXFCLENBQUM7UUFDL0QsSUFBTSxXQUFXLEdBQ2IsbUhBRW9CLEtBQUsseURBQ0MsU0FBUyxDQUFDLGNBQWMscUZBRXBDLENBQUM7UUFDbkIsSUFBTSxJQUFJLEdBQUcseUJBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN0QyxJQUFNLE9BQU8sR0FBRztZQUNaLE9BQU8sRUFBRSxJQUFJLGtCQUFXLENBQUM7Z0JBQ3JCLGNBQWMsRUFBRSxXQUFXO2dCQUMzQixZQUFZLEVBQUUsZ0NBQWdDO2FBQ2pELENBQUM7WUFDRixZQUFZLEVBQUUsTUFBZ0I7U0FDakMsQ0FBQztRQUNGLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDdkIsR0FBRyxFQUNILElBQUksRUFDSixPQUFPLENBQ1YsQ0FBQztJQUNOLENBQUM7SUFFTyxvQ0FBYyxHQUF0QixVQUF1QixJQUFVO1FBQzdCLElBQU0sSUFBSSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxNQUFNLENBQUMsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxNQUFNLENBQUMsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxNQUFNLENBQUMsd0JBQXdCLEVBQUUsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUUsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxNQUFNLENBQUMsc0JBQXNCLEVBQUUsU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDcEUsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNoQixDQUFDO0lBbkRRLFdBQVc7UUFEdkIsaUJBQVUsRUFBRTt5Q0FNd0IsaUJBQVU7T0FMbEMsV0FBVyxDQW9EdkI7SUFBRCxrQkFBQztDQUFBLEFBcERELElBb0RDO0FBcERZLGtDQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi91c2VyXCI7XHJcbmltcG9ydCB7IGJhc2VSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uL3NvYXAvcmVxdWVzdC9iYXNlUmVxdWVzdFwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anMvT2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSBcIi4uLy4uL2NvbnN0YW50c1wiXHJcbmltcG9ydCAqIGFzIGFwcFNldHRpbmdzIGZyb20gXCJhcHBsaWNhdGlvbi1zZXR0aW5nc1wiXHJcblxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVXNlclNlcnZpY2Uge1xyXG4gICAgb3B0aW9ucyA9IHtcclxuICAgICAgICByZXNwb25zZVR5cGU6IFwidGV4dFwiIGFzIFwidGV4dFwiXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCBwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQgKSB7fVxyXG5cclxuICAgIGxvZ2luKCB1c2VyOiBVc2VyICk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gQ29uc3RhbnRzLlNFUlZFUl9VUkwgKyBcIkxvZ2luL1wiO1xyXG4gICAgICAgIGNvbnN0IGJvZHkgPSB0aGlzLmJ1aWxkTG9naW5Cb2R5KHVzZXIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdChcclxuICAgICAgICAgICAgdXJsLFxyXG4gICAgICAgICAgICBib2R5LFxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHVzZXJEZXRhaWwoIHRva2VuOiBzdHJpbmcgKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICBjb25zdCB1cmwgPSBDb25zdGFudHMuQkFTRV9TRVJWSUNFX1VSTCArIFwiVXNlck1hbmFnZW1lbnQuYXNteFwiO1xyXG4gICAgICAgIGNvbnN0IHJlcXVlc3RCb2R5ID1cclxuICAgICAgICAgICAgYDxVc2VyRGV0YWlsIHhtbG5zPVxcXCJodHRwczovL2lzLnNrYXV0LmN6L1xcXCI+XHJcbiAgICAgICAgICAgICAgICA8dXNlckRldGFpbElucHV0PlxyXG4gICAgICAgICAgICAgICAgICAgIDxJRF9Mb2dpbj4ke3Rva2VufTwvSURfTG9naW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPElEX0FwcGxpY2F0aW9uPiR7Q29uc3RhbnRzLkFQUExJQ0FUSU9OX0lEfTwvSURfQXBwbGljYXRpb24+XHJcbiAgICAgICAgICAgICAgICA8L3VzZXJEZXRhaWxJbnB1dD5cclxuICAgICAgICAgICAgPC9Vc2VyRGV0YWlsPmA7XHJcbiAgICAgICAgY29uc3QgYm9keSA9IGJhc2VSZXF1ZXN0KHJlcXVlc3RCb2R5KTtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnMoe1xyXG4gICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCIgdGV4dC94bWxcIixcclxuICAgICAgICAgICAgICAgIFwiU09BUEFjdGlvblwiOiBcImh0dHBzOi8vaXMuc2thdXQuY3ovVXNlckRldGFpbFwiXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICByZXNwb25zZVR5cGU6IFwidGV4dFwiIGFzIFwidGV4dFwiXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3QoXHJcbiAgICAgICAgICAgIHVybCxcclxuICAgICAgICAgICAgYm9keSxcclxuICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBidWlsZExvZ2luQm9keSh1c2VyOiBVc2VyKTogRm9ybURhdGEge1xyXG4gICAgICAgIGNvbnN0IGJvZHkgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICBib2R5LmFwcGVuZChcImFwcGlkXCIsIENvbnN0YW50cy5BUFBMSUNBVElPTl9JRCk7XHJcbiAgICAgICAgYm9keS5hcHBlbmQoXCJjdGwwMCRDb250ZW50JHR4dFVzZXJOYW1lXCIsIHVzZXIubmFtZSk7XHJcbiAgICAgICAgYm9keS5hcHBlbmQoXCJjdGwwMCRDb250ZW50JHR4dFBhc3N3b3JkXCIsIHVzZXIucGFzc3dvcmQpO1xyXG4gICAgICAgIGJvZHkuYXBwZW5kKFwiY3RsMDAkQ29udGVudCRCdG5Mb2dpblwiLCBDb25zdGFudHMuQlVUVE9OX0xPR0lOKTtcclxuICAgICAgICBib2R5LmFwcGVuZChcIl9fRVZFTlRWQUxJREFUSU9OXCIsIENvbnN0YW50cy5fX0VWRU5UVkFMSURBVElPTik7XHJcbiAgICAgICAgYm9keS5hcHBlbmQoXCJfX1ZJRVdTVEFURVwiLCBDb25zdGFudHMuX19WSUVXU1RBVEUpO1xyXG4gICAgICAgIGJvZHkuYXBwZW5kKFwiX19WSUVXU1RBVEVHRU5FUkFUT1JcIiwgQ29uc3RhbnRzLl9fVklFV1NUQVRFR0VORVJBVE9SKTtcclxuICAgICAgICByZXR1cm4gYm9keTtcclxuICAgIH1cclxufSJdfQ==