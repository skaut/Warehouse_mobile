"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
var Constants = require("../../constants");
var UserService = /** @class */ (function () {
    function UserService(httpClient) {
        this.httpClient = httpClient;
        this.serviceName = "UserManagement";
    }
    UserService.prototype.login = function (user) {
        var url = Constants.SERVER_URL + "Login/";
        var body = this.buildLoginBody(user);
        return this.httpClient.post(url, body, { responseType: "text" });
    };
    UserService.prototype.getUserDetail = function (userDetail) {
        return userDetail.call(userDetail, this.serviceName, this.httpClient);
    };
    UserService.prototype.buildLoginBody = function (user) {
        var body = new FormData();
        body.append("appid", Constants.APPLICATION_ID);
        body.append("ctl00$Content$txtUserName", user.name);
        body.append("ctl00$Content$txtPassword", user.password);
        body.append("ctl00$Content$BtnLogin", Constants.BUTTON_LOGIN);
        body.append("__EVENTVALIDATION", Constants.__EVENTVALIDATION);
        body.append("__VIEWSTATE", Constants.__VIEWSTATE);
        // body.append("__VIEWSTATEGENERATOR", Constants.__VIEWSTATEGENERATOR);
        return body;
    };
    UserService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient])
    ], UserService);
    return UserService;
}());
exports.UserService = UserService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXNlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBQzNDLDZDQUFrRDtBQUdsRCwyQ0FBNEM7QUFLNUM7SUFJSSxxQkFBcUIsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUYzQyxnQkFBVyxHQUFXLGdCQUFnQixDQUFDO0lBRVEsQ0FBQztJQUdoRCwyQkFBSyxHQUFMLFVBQU8sSUFBVTtRQUNiLElBQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO1FBQzVDLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUN2QixHQUFHLEVBQ0gsSUFBSSxFQUNKLEVBQUUsWUFBWSxFQUFFLE1BQWdCLEVBQUUsQ0FDckMsQ0FBQztJQUNOLENBQUM7SUFFRCxtQ0FBYSxHQUFiLFVBQWMsVUFBc0I7UUFDaEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFTyxvQ0FBYyxHQUF0QixVQUF1QixJQUFVO1FBQzdCLElBQU0sSUFBSSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxNQUFNLENBQUMsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxNQUFNLENBQUMsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxNQUFNLENBQUMsd0JBQXdCLEVBQUUsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUUsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2xELHVFQUF1RTtRQUN2RSxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUEvQlEsV0FBVztRQUR2QixpQkFBVSxFQUFFO3lDQUt3QixpQkFBVTtPQUpsQyxXQUFXLENBZ0N2QjtJQUFELGtCQUFDO0NBQUEsQUFoQ0QsSUFnQ0M7QUFoQ1ksa0NBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4vdXNlclwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anMvT2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSBcIi4uLy4uL2NvbnN0YW50c1wiXHJcbmltcG9ydCB7IFVzZXJEZXRhaWwgfSBmcm9tIFwiLi4vLi4vc29hcC9yZXF1ZXN0cy91c2VyRGV0YWlsXCI7XHJcblxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVXNlclNlcnZpY2Uge1xyXG5cclxuICAgIHNlcnZpY2VOYW1lOiBzdHJpbmcgPSBcIlVzZXJNYW5hZ2VtZW50XCI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoIHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCApIHt9XHJcblxyXG5cclxuICAgIGxvZ2luKCB1c2VyOiBVc2VyICk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gQ29uc3RhbnRzLlNFUlZFUl9VUkwgKyBcIkxvZ2luL1wiO1xyXG4gICAgICAgIGNvbnN0IGJvZHkgPSB0aGlzLmJ1aWxkTG9naW5Cb2R5KHVzZXIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdChcclxuICAgICAgICAgICAgdXJsLFxyXG4gICAgICAgICAgICBib2R5LFxyXG4gICAgICAgICAgICB7IHJlc3BvbnNlVHlwZTogXCJ0ZXh0XCIgYXMgXCJ0ZXh0XCIgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXNlckRldGFpbCh1c2VyRGV0YWlsOiBVc2VyRGV0YWlsKSB7XHJcbiAgICAgICAgcmV0dXJuIHVzZXJEZXRhaWwuY2FsbCh1c2VyRGV0YWlsLCB0aGlzLnNlcnZpY2VOYW1lLCB0aGlzLmh0dHBDbGllbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYnVpbGRMb2dpbkJvZHkodXNlcjogVXNlcik6IEZvcm1EYXRhIHtcclxuICAgICAgICBjb25zdCBib2R5ID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgICAgYm9keS5hcHBlbmQoXCJhcHBpZFwiLCBDb25zdGFudHMuQVBQTElDQVRJT05fSUQpO1xyXG4gICAgICAgIGJvZHkuYXBwZW5kKFwiY3RsMDAkQ29udGVudCR0eHRVc2VyTmFtZVwiLCB1c2VyLm5hbWUpO1xyXG4gICAgICAgIGJvZHkuYXBwZW5kKFwiY3RsMDAkQ29udGVudCR0eHRQYXNzd29yZFwiLCB1c2VyLnBhc3N3b3JkKTtcclxuICAgICAgICBib2R5LmFwcGVuZChcImN0bDAwJENvbnRlbnQkQnRuTG9naW5cIiwgQ29uc3RhbnRzLkJVVFRPTl9MT0dJTik7XHJcbiAgICAgICAgYm9keS5hcHBlbmQoXCJfX0VWRU5UVkFMSURBVElPTlwiLCBDb25zdGFudHMuX19FVkVOVFZBTElEQVRJT04pO1xyXG4gICAgICAgIGJvZHkuYXBwZW5kKFwiX19WSUVXU1RBVEVcIiwgQ29uc3RhbnRzLl9fVklFV1NUQVRFKTtcclxuICAgICAgICAvLyBib2R5LmFwcGVuZChcIl9fVklFV1NUQVRFR0VORVJBVE9SXCIsIENvbnN0YW50cy5fX1ZJRVdTVEFURUdFTkVSQVRPUik7XHJcbiAgICAgICAgcmV0dXJuIGJvZHk7XHJcbiAgICB9XHJcbn0iXX0=